version: '3'
services:
    db:
        container_name: darksouls-db
        image: mysql:8
        environment:
            MYSQL_DATABASE: 'data'
            MYSQL_USER: 'user'
            MYSQL_PASSWORD: 'password'
            MYSQL_ROOT_PASSWORD: 'password'
        ports:
            - "3306:3306"
        healthcheck:
            test: mysql --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD -e 'SHOW DATABASES;'
            interval: 30s
            timeout: 10s
            retries: 5
    graph-db:
        container_name: darksouls-graph-db
        build:
            context: ../
            dockerfile: ./docker/Dockerfile.database
        ports:
            - "7687:7687"
            - "7474:7474"
            - "7473:7473"
        environment:
            - NEO4J_AUTH=neo4j/secret
            - NEO4J_dbms_memory_pagecache_size=1G
            - NEO4J_dbms.memory.heap.initial_size=1G
            - NEO4J_dbms_memory_heap_max__size=1G
            - NEO4JLABS_PLUGINS=["apoc"]
        healthcheck:
            test: perl -MIO::Socket::INET -e 'exit(! defined( IO::Socket::INET->new("localhost:7687")))'
            interval: 30s
            timeout: 10s
            retries: 5
    graph-db-seeder:
        container_name: darksouls-graph-db-seeder
        build:
            context: ../
            dockerfile: ./docker/Dockerfile.seeder
        depends_on:
            graph-db:
                condition: service_healthy
        links:
            - "graph-db"
        environment: 
            - NEO4J_USERNAME=neo4j
            - NEO4J_PASSWORD=secret
    backend:
        container_name: darksouls-backend
        profiles: ["backend"]
        depends_on:
            db:
                condition: service_healthy
            graph-db:
                condition: service_healthy
            graph-db-seeder:
                condition: service_completed_successfully
        build:
            context: ../
            dockerfile: ./docker/Dockerfile
            args:
                WAR_NAME: darksouls-explorer-backend
        links:
            - "db"
            - "graph-db"
        ports:
            - "8080:8080"
            - "8000:8000"
        environment:
            - spring_profiles_active=docker